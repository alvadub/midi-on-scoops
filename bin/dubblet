#!/bin/sh

':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
;

'use strict';

const fs = require('fs');
const watch = require('node-watch');
const spawn = require('child_process').spawn;

const builder = require('../lib/builder');
const parser = require('../lib/parsing');

const children = [];

const src = process.argv.slice(2)[0] || 'music';

const prefix = '♫ MIDI on SCOOPS';
const CLR = '\x1b[K';

let tt;

function play(name) {
  process.stdout.write(`\b  ( ${prefix} ) Loading ${name} ...${CLR}\r`);

  const text = fs.readFileSync(name).toString();
  const ast = parser(text);
  const code = builder(ast);

  children.forEach((child, i) => {
    children.splice(i, 1);
    child.kill('SIGINT');
  });

  const audio = name.replace('.txt', '.mid');

  clearTimeout(tt);

  code
    .save(audio)
    .then(() => {
      setTimeout(() => {
        process.stdout.write(`\b  ( ${prefix} ) ► Playing: ${audio}${CLR}\r`);
      }, 100);

      const child = spawn('timidity', [audio], {
        detached: false,
      });

      child.on('close', () => {
        process.stdout.write(`\b  ( ${prefix} ) ⏏ Done playing: ${audio}${CLR}\r`);
      });

      children.push(child);
    });
}

let i = 0;

const chars = '\\|/-';

setInterval(() => {
  process.stdout.write(`\b${chars[i % chars.length]}\r`);
  i++;
}, 260);

if (process.argv.slice(2)[0]) {
  play(process.argv.slice(2)[0]);
} else {
  process.stdout.write(`\b  ( ${prefix} ) Watching from: ${src} ...${CLR}\r`);

  watch(src, { recursive: true, filter: /\.txt$/ }, (evt, name) => {
    try {
      play(name);
    } catch (e) {
      process.stdout.write(`\n${e.stack}\n`);
    }

    process.stdout.write(`\b  ( ${prefix} ) ${name} changed${CLR}\r`);
  });
}

process.on('SIGINT', () => {
  process.stdout.write('\r\r');

  children.forEach((child, k) => {
    children.splice(k, 1);
    child.kill('SIGINT');
  });

  process.exit(1);
});
