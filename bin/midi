#!/bin/sh

':' // ; exec "$(command -v nodejs || command -v node)" "$0" "$@"
;

'use strict';

const fs = require('fs');
const watch = require('node-watch');
const spawn = require('child_process').spawn;

const builder = require('../lib/builder');
const parser = require('../lib/parsing');

const children = [];

const log = msg => process.stdout.write(msg);

const musicDir = process.argv.slice(2)[0] || 'music';
const prefix = '♫';
const CLR = '\x1b[K';

const bin = process.argv.slice(2)[1] || 'timidity';
const argv = process.argv.slice(4);

let tt;

function exit() {
  children.forEach((child, k) => {
    children.splice(k, 1);
    child.kill('SIGINT');
  });

  clearTimeout(tt);

  process.exit(1);
}

function play(name) {
  log(`\b  ( ${prefix} ) Loading ${name} ...${CLR}\r`);

  const text = fs.readFileSync(name).toString();
  const ast = parser(text);
  const code = builder(ast);

  children.splice(0, children.length)
    .forEach(child => {
      child.kill('SIGINT');
    });

  clearTimeout(tt);

  if (ast.settings.pause) {
    setTimeout(() => {
      log(`\b  ( ${prefix} ) ❚❚ Pause: ${name}${CLR}\r`);
    }, 100);
    return;
  }

  let _bin;
  let _argv;

  if (ast.settings.playback) {
    _argv = ast.settings.playback.split(' ');
    _bin = _argv.shift();
  } else {
    _argv = argv.slice();
    _bin = bin;
  }

  return code
    .save(name.replace('.dub', ''))
    .then(destFiles => {
      const deferred = [];

      destFiles.forEach(midi => {
        let cmd = [_bin].concat(_argv);

        if (midi.settings.playback) {
          cmd = midi.settings.playback.split(' ');
        }

        const child = spawn(cmd[0], cmd.slice(1).concat(midi.filepath), {
          detached: false,
        });

        deferred.push(new Promise((resolve, reject) => {
          child.on('close', resolve);
          child.on('error', reject);
        }));

        children.push(child);
      });

      const _length = Object.keys(ast.tracks).length;

      setTimeout(() => {
        log(`\b  ( ${prefix} ) ► Playing: ${name} (${destFiles.length} track${
          destFiles.length === 1 ? '' : 's'
        }${_length !== destFiles.length ? `, ${_length} clip${
          _length === 1 ? '' : 's'
        }` : ''})${CLR}\r`);
      }, 100);

      return Promise.all(deferred).then(() => {
        log(`\b  ( ${prefix} ) ⏏ Stopped playing: ${name}${CLR}\r`);
      });
    })
    .catch(e => {
      log(`\n${e.stack}\n`);
    });
}

let i = 0;

const chars = '\\|/-';

setInterval(() => {
  log(`\b${chars[i % chars.length]}\r`);
  i++;
}, 260);

if (process.argv.slice(2)[0] && process.argv.slice(2)[0].indexOf('.dub') > -1) {
  play(process.argv.slice(2)[0]).then(() => setTimeout(exit, 100));
} else {
  log(`\b  ( ${prefix} ) Watching from: ${musicDir} ...${CLR}\r`);

  watch(musicDir, { recursive: true, filter: /\.dub$/ }, (evt, name) => {
    try {
      play(name);
    } catch (e) {
      log(`\n${e.stack}\n`);
    }

    log(`\b  ( ${prefix} ) ${name} changed${CLR}\r`);
  });
}

process.on('SIGINT', () => {
  log('\r\r');
  exit();
});
